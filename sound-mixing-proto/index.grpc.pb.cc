// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: packages/util/sound-mixing-proto/index.proto

#include "index.pb.h"
#include "index.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Mixer_method_names[] = {
  "/Mixer/mixing",
};

std::unique_ptr< Mixer::Stub> Mixer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Mixer::Stub> stub(new Mixer::Stub(channel));
  return stub;
}

Mixer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_mixing_(Mixer_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::ChunkedData>* Mixer::Stub::mixingRaw(::grpc::ClientContext* context, const ::RequestVoiceMixing& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::ChunkedData>::Create(channel_.get(), rpcmethod_mixing_, context, request);
}

void Mixer::Stub::experimental_async::mixing(::grpc::ClientContext* context, ::RequestVoiceMixing* request, ::grpc::experimental::ClientReadReactor< ::ChunkedData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::ChunkedData>::Create(stub_->channel_.get(), stub_->rpcmethod_mixing_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ChunkedData>* Mixer::Stub::AsyncmixingRaw(::grpc::ClientContext* context, const ::RequestVoiceMixing& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ChunkedData>::Create(channel_.get(), cq, rpcmethod_mixing_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ChunkedData>* Mixer::Stub::PrepareAsyncmixingRaw(::grpc::ClientContext* context, const ::RequestVoiceMixing& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ChunkedData>::Create(channel_.get(), cq, rpcmethod_mixing_, context, request, false, nullptr);
}

Mixer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mixer_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Mixer::Service, ::RequestVoiceMixing, ::ChunkedData>(
          std::mem_fn(&Mixer::Service::mixing), this)));
}

Mixer::Service::~Service() {
}

::grpc::Status Mixer::Service::mixing(::grpc::ServerContext* context, const ::RequestVoiceMixing* request, ::grpc::ServerWriter< ::ChunkedData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


