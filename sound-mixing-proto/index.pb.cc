// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/util/sound-mixing-proto/index.proto

#include "index.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class RequestVoiceMixingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoiceMixing> _instance;
} _RequestVoiceMixing_default_instance_;
class ChunkedDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChunkedData> _instance;
} _ChunkedData_default_instance_;
static void InitDefaultsscc_info_ChunkedData_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChunkedData_default_instance_;
    new (ptr) ::ChunkedData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChunkedData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChunkedData_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChunkedData_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoiceMixing_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestVoiceMixing_default_instance_;
    new (ptr) ::RequestVoiceMixing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestVoiceMixing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoiceMixing_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoiceMixing_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, htsvoice_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, text_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, speed_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, tone_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, volume_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, maxreadlimit_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, allpass_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, intone_),
  PROTOBUF_FIELD_OFFSET(::RequestVoiceMixing, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChunkedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChunkedData, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RequestVoiceMixing)},
  { 14, -1, sizeof(::ChunkedData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestVoiceMixing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChunkedData_default_instance_),
};

const char descriptor_table_protodef_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,packages/util/sound-mixing-proto/index"
  ".proto\"\253\001\n\022RequestVoiceMixing\022\020\n\010htsvoic"
  "e\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022\r\n\005speed\030\003 \001(\002\022\014\n\004"
  "tone\030\004 \001(\002\022\016\n\006volume\030\005 \001(\002\022\024\n\014maxReadLim"
  "it\030\006 \001(\002\022\017\n\007allpass\030\007 \001(\002\022\016\n\006intone\030\010 \001("
  "\002\022\021\n\tthreshold\030\t \001(\002\"\033\n\013ChunkedData\022\014\n\004d"
  "ata\030\001 \001(\01426\n\005Mixer\022-\n\006mixing\022\023.RequestVo"
  "iceMixing\032\014.ChunkedData0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto_sccs[2] = {
  &scc_info_ChunkedData_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.base,
  &scc_info_RequestVoiceMixing_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto = {
  false, false, descriptor_table_protodef_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto, "packages/util/sound-mixing-proto/index.proto", 313,
  &descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto_once, descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto_sccs, descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto::offsets,
  file_level_metadata_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto, 2, file_level_enum_descriptors_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto, file_level_service_descriptors_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto)), true);

// ===================================================================

void RequestVoiceMixing::InitAsDefaultInstance() {
}
class RequestVoiceMixing::_Internal {
 public:
};

RequestVoiceMixing::RequestVoiceMixing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RequestVoiceMixing)
}
RequestVoiceMixing::RequestVoiceMixing(const RequestVoiceMixing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  htsvoice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_htsvoice().empty()) {
    htsvoice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_htsvoice(),
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:RequestVoiceMixing)
}

void RequestVoiceMixing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestVoiceMixing_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.base);
  htsvoice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(threshold_));
}

RequestVoiceMixing::~RequestVoiceMixing() {
  // @@protoc_insertion_point(destructor:RequestVoiceMixing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestVoiceMixing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  htsvoice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestVoiceMixing::ArenaDtor(void* object) {
  RequestVoiceMixing* _this = reinterpret_cast< RequestVoiceMixing* >(object);
  (void)_this;
}
void RequestVoiceMixing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoiceMixing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoiceMixing& RequestVoiceMixing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoiceMixing_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.base);
  return *internal_default_instance();
}


void RequestVoiceMixing::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestVoiceMixing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  htsvoice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoiceMixing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string htsvoice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_htsvoice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RequestVoiceMixing.htsvoice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RequestVoiceMixing.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          tone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maxReadLimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          maxreadlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float allpass = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          allpass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float intone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          intone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float threshold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoiceMixing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestVoiceMixing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string htsvoice = 1;
  if (this->htsvoice().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htsvoice().data(), static_cast<int>(this->_internal_htsvoice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestVoiceMixing.htsvoice");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htsvoice(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestVoiceMixing.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // float speed = 3;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_speed(), target);
  }

  // float tone = 4;
  if (!(this->tone() <= 0 && this->tone() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_tone(), target);
  }

  // float volume = 5;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_volume(), target);
  }

  // float maxReadLimit = 6;
  if (!(this->maxreadlimit() <= 0 && this->maxreadlimit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_maxreadlimit(), target);
  }

  // float allpass = 7;
  if (!(this->allpass() <= 0 && this->allpass() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_allpass(), target);
  }

  // float intone = 8;
  if (!(this->intone() <= 0 && this->intone() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_intone(), target);
  }

  // float threshold = 9;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestVoiceMixing)
  return target;
}

size_t RequestVoiceMixing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestVoiceMixing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string htsvoice = 1;
  if (this->htsvoice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htsvoice());
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // float speed = 3;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float tone = 4;
  if (!(this->tone() <= 0 && this->tone() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 5;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float maxReadLimit = 6;
  if (!(this->maxreadlimit() <= 0 && this->maxreadlimit() >= 0)) {
    total_size += 1 + 4;
  }

  // float allpass = 7;
  if (!(this->allpass() <= 0 && this->allpass() >= 0)) {
    total_size += 1 + 4;
  }

  // float intone = 8;
  if (!(this->intone() <= 0 && this->intone() >= 0)) {
    total_size += 1 + 4;
  }

  // float threshold = 9;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoiceMixing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestVoiceMixing)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoiceMixing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoiceMixing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestVoiceMixing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestVoiceMixing)
    MergeFrom(*source);
  }
}

void RequestVoiceMixing::MergeFrom(const RequestVoiceMixing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestVoiceMixing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.htsvoice().size() > 0) {
    _internal_set_htsvoice(from._internal_htsvoice());
  }
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.tone() <= 0 && from.tone() >= 0)) {
    _internal_set_tone(from._internal_tone());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.maxreadlimit() <= 0 && from.maxreadlimit() >= 0)) {
    _internal_set_maxreadlimit(from._internal_maxreadlimit());
  }
  if (!(from.allpass() <= 0 && from.allpass() >= 0)) {
    _internal_set_allpass(from._internal_allpass());
  }
  if (!(from.intone() <= 0 && from.intone() >= 0)) {
    _internal_set_intone(from._internal_intone());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void RequestVoiceMixing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestVoiceMixing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoiceMixing::CopyFrom(const RequestVoiceMixing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestVoiceMixing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoiceMixing::IsInitialized() const {
  return true;
}

void RequestVoiceMixing::InternalSwap(RequestVoiceMixing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  htsvoice_.Swap(&other->htsvoice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoiceMixing, threshold_)
      + sizeof(RequestVoiceMixing::threshold_)
      - PROTOBUF_FIELD_OFFSET(RequestVoiceMixing, speed_)>(
          reinterpret_cast<char*>(&speed_),
          reinterpret_cast<char*>(&other->speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoiceMixing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChunkedData::InitAsDefaultInstance() {
}
class ChunkedData::_Internal {
 public:
};

ChunkedData::ChunkedData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChunkedData)
}
ChunkedData::ChunkedData(const ChunkedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ChunkedData)
}

void ChunkedData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChunkedData_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChunkedData::~ChunkedData() {
  // @@protoc_insertion_point(destructor:ChunkedData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkedData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChunkedData::ArenaDtor(void* object) {
  ChunkedData* _this = reinterpret_cast< ChunkedData* >(object);
  (void)_this;
}
void ChunkedData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChunkedData& ChunkedData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChunkedData_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.base);
  return *internal_default_instance();
}


void ChunkedData::Clear() {
// @@protoc_insertion_point(message_clear_start:ChunkedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChunkedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChunkedData)
  return target;
}

size_t ChunkedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChunkedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChunkedData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChunkedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChunkedData)
    MergeFrom(*source);
  }
}

void ChunkedData::MergeFrom(const ChunkedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChunkedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void ChunkedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChunkedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkedData::CopyFrom(const ChunkedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChunkedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkedData::IsInitialized() const {
  return true;
}

void ChunkedData::InternalSwap(ChunkedData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkedData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RequestVoiceMixing* Arena::CreateMaybeMessage< ::RequestVoiceMixing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestVoiceMixing >(arena);
}
template<> PROTOBUF_NOINLINE ::ChunkedData* Arena::CreateMaybeMessage< ::ChunkedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChunkedData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
