// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/util/sound-mixing-proto/index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto;
class ChunkedData;
class ChunkedDataDefaultTypeInternal;
extern ChunkedDataDefaultTypeInternal _ChunkedData_default_instance_;
class RequestVoiceMixing;
class RequestVoiceMixingDefaultTypeInternal;
extern RequestVoiceMixingDefaultTypeInternal _RequestVoiceMixing_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChunkedData* Arena::CreateMaybeMessage<::ChunkedData>(Arena*);
template<> ::RequestVoiceMixing* Arena::CreateMaybeMessage<::RequestVoiceMixing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RequestVoiceMixing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestVoiceMixing) */ {
 public:
  inline RequestVoiceMixing() : RequestVoiceMixing(nullptr) {};
  virtual ~RequestVoiceMixing();

  RequestVoiceMixing(const RequestVoiceMixing& from);
  RequestVoiceMixing(RequestVoiceMixing&& from) noexcept
    : RequestVoiceMixing() {
    *this = ::std::move(from);
  }

  inline RequestVoiceMixing& operator=(const RequestVoiceMixing& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoiceMixing& operator=(RequestVoiceMixing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoiceMixing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoiceMixing* internal_default_instance() {
    return reinterpret_cast<const RequestVoiceMixing*>(
               &_RequestVoiceMixing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoiceMixing& a, RequestVoiceMixing& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoiceMixing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoiceMixing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoiceMixing* New() const final {
    return CreateMaybeMessage<RequestVoiceMixing>(nullptr);
  }

  RequestVoiceMixing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoiceMixing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoiceMixing& from);
  void MergeFrom(const RequestVoiceMixing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoiceMixing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestVoiceMixing";
  }
  protected:
  explicit RequestVoiceMixing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto);
    return ::descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHtsvoiceFieldNumber = 1,
    kTextFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kToneFieldNumber = 4,
    kVolumeFieldNumber = 5,
    kMaxReadLimitFieldNumber = 6,
    kAllpassFieldNumber = 7,
    kIntoneFieldNumber = 8,
    kThresholdFieldNumber = 9,
  };
  // string htsvoice = 1;
  void clear_htsvoice();
  const std::string& htsvoice() const;
  void set_htsvoice(const std::string& value);
  void set_htsvoice(std::string&& value);
  void set_htsvoice(const char* value);
  void set_htsvoice(const char* value, size_t size);
  std::string* mutable_htsvoice();
  std::string* release_htsvoice();
  void set_allocated_htsvoice(std::string* htsvoice);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_htsvoice();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_htsvoice(
      std::string* htsvoice);
  private:
  const std::string& _internal_htsvoice() const;
  void _internal_set_htsvoice(const std::string& value);
  std::string* _internal_mutable_htsvoice();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // float speed = 3;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float tone = 4;
  void clear_tone();
  float tone() const;
  void set_tone(float value);
  private:
  float _internal_tone() const;
  void _internal_set_tone(float value);
  public:

  // float volume = 5;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // float maxReadLimit = 6;
  void clear_maxreadlimit();
  float maxreadlimit() const;
  void set_maxreadlimit(float value);
  private:
  float _internal_maxreadlimit() const;
  void _internal_set_maxreadlimit(float value);
  public:

  // float allpass = 7;
  void clear_allpass();
  float allpass() const;
  void set_allpass(float value);
  private:
  float _internal_allpass() const;
  void _internal_set_allpass(float value);
  public:

  // float intone = 8;
  void clear_intone();
  float intone() const;
  void set_intone(float value);
  private:
  float _internal_intone() const;
  void _internal_set_intone(float value);
  public:

  // float threshold = 9;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:RequestVoiceMixing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htsvoice_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  float speed_;
  float tone_;
  float volume_;
  float maxreadlimit_;
  float allpass_;
  float intone_;
  float threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto;
};
// -------------------------------------------------------------------

class ChunkedData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChunkedData) */ {
 public:
  inline ChunkedData() : ChunkedData(nullptr) {};
  virtual ~ChunkedData();

  ChunkedData(const ChunkedData& from);
  ChunkedData(ChunkedData&& from) noexcept
    : ChunkedData() {
    *this = ::std::move(from);
  }

  inline ChunkedData& operator=(const ChunkedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkedData& operator=(ChunkedData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkedData* internal_default_instance() {
    return reinterpret_cast<const ChunkedData*>(
               &_ChunkedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChunkedData& a, ChunkedData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkedData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkedData* New() const final {
    return CreateMaybeMessage<ChunkedData>(nullptr);
  }

  ChunkedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkedData& from);
  void MergeFrom(const ChunkedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChunkedData";
  }
  protected:
  explicit ChunkedData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto);
    return ::descriptor_table_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ChunkedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoiceMixing

// string htsvoice = 1;
inline void RequestVoiceMixing::clear_htsvoice() {
  htsvoice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestVoiceMixing::htsvoice() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.htsvoice)
  return _internal_htsvoice();
}
inline void RequestVoiceMixing::set_htsvoice(const std::string& value) {
  _internal_set_htsvoice(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.htsvoice)
}
inline std::string* RequestVoiceMixing::mutable_htsvoice() {
  // @@protoc_insertion_point(field_mutable:RequestVoiceMixing.htsvoice)
  return _internal_mutable_htsvoice();
}
inline const std::string& RequestVoiceMixing::_internal_htsvoice() const {
  return htsvoice_.Get();
}
inline void RequestVoiceMixing::_internal_set_htsvoice(const std::string& value) {
  
  htsvoice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestVoiceMixing::set_htsvoice(std::string&& value) {
  
  htsvoice_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RequestVoiceMixing.htsvoice)
}
inline void RequestVoiceMixing::set_htsvoice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htsvoice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RequestVoiceMixing.htsvoice)
}
inline void RequestVoiceMixing::set_htsvoice(const char* value,
    size_t size) {
  
  htsvoice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RequestVoiceMixing.htsvoice)
}
inline std::string* RequestVoiceMixing::_internal_mutable_htsvoice() {
  
  return htsvoice_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestVoiceMixing::release_htsvoice() {
  // @@protoc_insertion_point(field_release:RequestVoiceMixing.htsvoice)
  return htsvoice_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestVoiceMixing::set_allocated_htsvoice(std::string* htsvoice) {
  if (htsvoice != nullptr) {
    
  } else {
    
  }
  htsvoice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htsvoice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RequestVoiceMixing.htsvoice)
}
inline std::string* RequestVoiceMixing::unsafe_arena_release_htsvoice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RequestVoiceMixing.htsvoice)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return htsvoice_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestVoiceMixing::unsafe_arena_set_allocated_htsvoice(
    std::string* htsvoice) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (htsvoice != nullptr) {
    
  } else {
    
  }
  htsvoice_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      htsvoice, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RequestVoiceMixing.htsvoice)
}

// string text = 2;
inline void RequestVoiceMixing::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestVoiceMixing::text() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.text)
  return _internal_text();
}
inline void RequestVoiceMixing::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.text)
}
inline std::string* RequestVoiceMixing::mutable_text() {
  // @@protoc_insertion_point(field_mutable:RequestVoiceMixing.text)
  return _internal_mutable_text();
}
inline const std::string& RequestVoiceMixing::_internal_text() const {
  return text_.Get();
}
inline void RequestVoiceMixing::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestVoiceMixing::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RequestVoiceMixing.text)
}
inline void RequestVoiceMixing::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RequestVoiceMixing.text)
}
inline void RequestVoiceMixing::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RequestVoiceMixing.text)
}
inline std::string* RequestVoiceMixing::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestVoiceMixing::release_text() {
  // @@protoc_insertion_point(field_release:RequestVoiceMixing.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestVoiceMixing::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RequestVoiceMixing.text)
}
inline std::string* RequestVoiceMixing::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RequestVoiceMixing.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestVoiceMixing::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RequestVoiceMixing.text)
}

// float speed = 3;
inline void RequestVoiceMixing::clear_speed() {
  speed_ = 0;
}
inline float RequestVoiceMixing::_internal_speed() const {
  return speed_;
}
inline float RequestVoiceMixing::speed() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.speed)
  return _internal_speed();
}
inline void RequestVoiceMixing::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void RequestVoiceMixing::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.speed)
}

// float tone = 4;
inline void RequestVoiceMixing::clear_tone() {
  tone_ = 0;
}
inline float RequestVoiceMixing::_internal_tone() const {
  return tone_;
}
inline float RequestVoiceMixing::tone() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.tone)
  return _internal_tone();
}
inline void RequestVoiceMixing::_internal_set_tone(float value) {
  
  tone_ = value;
}
inline void RequestVoiceMixing::set_tone(float value) {
  _internal_set_tone(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.tone)
}

// float volume = 5;
inline void RequestVoiceMixing::clear_volume() {
  volume_ = 0;
}
inline float RequestVoiceMixing::_internal_volume() const {
  return volume_;
}
inline float RequestVoiceMixing::volume() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.volume)
  return _internal_volume();
}
inline void RequestVoiceMixing::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void RequestVoiceMixing::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.volume)
}

// float maxReadLimit = 6;
inline void RequestVoiceMixing::clear_maxreadlimit() {
  maxreadlimit_ = 0;
}
inline float RequestVoiceMixing::_internal_maxreadlimit() const {
  return maxreadlimit_;
}
inline float RequestVoiceMixing::maxreadlimit() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.maxReadLimit)
  return _internal_maxreadlimit();
}
inline void RequestVoiceMixing::_internal_set_maxreadlimit(float value) {
  
  maxreadlimit_ = value;
}
inline void RequestVoiceMixing::set_maxreadlimit(float value) {
  _internal_set_maxreadlimit(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.maxReadLimit)
}

// float allpass = 7;
inline void RequestVoiceMixing::clear_allpass() {
  allpass_ = 0;
}
inline float RequestVoiceMixing::_internal_allpass() const {
  return allpass_;
}
inline float RequestVoiceMixing::allpass() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.allpass)
  return _internal_allpass();
}
inline void RequestVoiceMixing::_internal_set_allpass(float value) {
  
  allpass_ = value;
}
inline void RequestVoiceMixing::set_allpass(float value) {
  _internal_set_allpass(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.allpass)
}

// float intone = 8;
inline void RequestVoiceMixing::clear_intone() {
  intone_ = 0;
}
inline float RequestVoiceMixing::_internal_intone() const {
  return intone_;
}
inline float RequestVoiceMixing::intone() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.intone)
  return _internal_intone();
}
inline void RequestVoiceMixing::_internal_set_intone(float value) {
  
  intone_ = value;
}
inline void RequestVoiceMixing::set_intone(float value) {
  _internal_set_intone(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.intone)
}

// float threshold = 9;
inline void RequestVoiceMixing::clear_threshold() {
  threshold_ = 0;
}
inline float RequestVoiceMixing::_internal_threshold() const {
  return threshold_;
}
inline float RequestVoiceMixing::threshold() const {
  // @@protoc_insertion_point(field_get:RequestVoiceMixing.threshold)
  return _internal_threshold();
}
inline void RequestVoiceMixing::_internal_set_threshold(float value) {
  
  threshold_ = value;
}
inline void RequestVoiceMixing::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:RequestVoiceMixing.threshold)
}

// -------------------------------------------------------------------

// ChunkedData

// bytes data = 1;
inline void ChunkedData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChunkedData::data() const {
  // @@protoc_insertion_point(field_get:ChunkedData.data)
  return _internal_data();
}
inline void ChunkedData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ChunkedData.data)
}
inline std::string* ChunkedData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ChunkedData.data)
  return _internal_mutable_data();
}
inline const std::string& ChunkedData::_internal_data() const {
  return data_.Get();
}
inline void ChunkedData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChunkedData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChunkedData.data)
}
inline void ChunkedData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ChunkedData.data)
}
inline void ChunkedData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChunkedData.data)
}
inline std::string* ChunkedData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChunkedData::release_data() {
  // @@protoc_insertion_point(field_release:ChunkedData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChunkedData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChunkedData.data)
}
inline std::string* ChunkedData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ChunkedData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChunkedData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChunkedData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2futil_2fsound_2dmixing_2dproto_2findex_2eproto
